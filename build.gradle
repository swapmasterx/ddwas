plugins {
	id 'fabric-loom' version '1.3-SNAPSHOT'
	id 'maven-publish'
}
configurations.all {
   resolutionStrategy {
     force("net.fabricmc:fabric-loader:$loader_version")
   }
}
version = project.mod_version
group = project.maven_group
repositories {
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.terraformersmc.com/releases/" }
}

dependencies {
    modApi("me.shedaniel.cloth:cloth-config-fabric:8.3.103") {
        exclude(group: "net.fabricmc.fabric-api")
    }
}

base {
	archivesName = project.archives_base_name
}
repositories {
			maven { url 'https://jitpack.io' }
		}
		dependencies {
    implementation("com.github.LlamaLad7:MixinExtras:0.1.1")
    annotationProcessor("com.github.LlamaLad7:MixinExtras:0.1.1")
}
repositories {
	maven {
    name = 'Modrinth'
    url = 'https://api.modrinth.com/maven'
    content {
        includeGroup 'maven.modrinth'
    }
}
	dependencies {
		modImplementation "maven.modrinth:projectile-damage-attribute:3.2.1+1.19-fabric"
	}
maven {
        name 'maven'
        url 'https://maven.kosmx.dev/'
    }
maven { url = uri("https://maven.architectury.dev/") }




	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
}
repositories {
	maven {
		name = "TerraformersMC"
		url = "https://maven.terraformersmc.com/"
	}
	maven {
		name = "Ladysnake Libs"
		url = 'https://maven.ladysnake.org/releases'
	}
}
dependencies {
	modImplementation "dev.emi:trinkets:3.4.1"
}
loom {
    splitEnvironmentSourceSets()

	mods {
		"ddwas" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}
    runs {
		// This adds a new gradle task that runs the datagen API: "gradlew runDatagen"
		datagen {
			inherit server
			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
			vmArg "-Dfabric-api.datagen.modid=ddwas"
 
			runDir "build/datagen"
		}
	}
}
repositories {
    maven { url 'https://api.modrinth.com/maven' }  
}

dependencies {
    modImplementation "maven.modrinth:better-combat:1.7.1+1.19-fabric"
}
// Add the generated resources to the main source set
sourceSets {
	main {
		resources {
			srcDirs += [
					'src/main/generated'
			]
		}
	}
}
dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation("maven.modrinth:spell-engine:0.9.25+1.19-fabric")
	include modImplementation("dev.kosmx.player-anim:player-animation-lib-fabric:1.0.2")
	modImplementation("net.fabricmc:fabric-loader:0.14.22")
	{
    modImplementation "maven.modrinth:spell-power:0.9.12+1.19-fabric"
}


	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	
	// Uncomment the following line to enable the deprecated Fabric API modules. 
	// These are included in the Fabric API production distribution and allow you to update your mod to the latest modules at a later more convenient time.

	// modImplementation "net.fabricmc.fabric-api:fabric-api-deprecated:${project.fabric_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		maven {
    name = 'Modrinth'
    url = 'https://api.modrinth.com/maven'
    content {
        includeGroup 'maven.modrinth'
    }
}
maven {
        name 'maven'
        url 'https://maven.kosmx.dev/'
    }
	maven { url = uri("https://maven.architectury.dev/") }
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}